// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  name              String
  email             String   @unique
  password          String
  role              String   @default("pending")
  profileCompleted  Boolean  @default(false) // ✅ プロフィール完了フラグ
  children          Child[]  // ✅ 子どもとのリレーション
  createdAt         DateTime @default(now())
  imageUrl  String?
  imagePath  String? 
}

model Child {
  id         String   @id @default(cuid())
  name       String
  birthday   DateTime
  gender     String
  notes      String?         // アレルギーや特記事項など（任意）
  parent     User     @relation(fields: [parentId], references: [id])
  parentId   String             // 外部キー（保護者ID）
  createdAt  DateTime @default(now())
   reservations Reservation[]
  basicUsages  BasicUsage[]
  invoices     Invoice[]           // ✅ 追加：請求書との1対多リレーション
  revisions    InvoiceRevision[]   // ✅ 追加：請求書修正履歴との1対多リレーション
  monthlyOptionUsages MonthlyOptionUsage[] 

}


model Reservation {
  id        String   @id @default(cuid())
  date      DateTime
  type      String   // "basic" | "spot"
  options   Option[] // 🔁 1対多に変更
  child     Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId   String
  createdAt DateTime @default(now())
    // 🔍 よく検索される用のインデックス
  @@index([date])
  @@index([childId, date])
}

model Option {
  id            String   @id @default(cuid())
  type          String   // "lunch" | "dinner" | "school_car" | "home_car" | "lesson_car"
  count         Int      // 回数（1日1回 or 習い事送迎は複数回）
  time          String?  // お迎え時間（例: "17:15"）
  lessonName    String?  // 習い事名（必要なときだけ）
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId String
}


model BasicUsage {
  id            String   @id @default(cuid())
  child         Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId       String
  month         String
  weeklyCount   Int
  weekdays      Json
  createdAt     DateTime @default(now())

  optionUsages  MonthlyOptionUsage[]  // ← リレーション先（1対多）

  @@unique([childId, month])
}


model Invoice {
  id          String   @id @default(cuid())
  child       Child    @relation(fields: [childId], references: [id])
  childId     String
  month       String   // 例: "2025-05"
  version     String   // BillingSettingのversion名
  breakdown   Json     // 金額内訳（基本・スポット・オプションすべて）
  total       Int
  finalizedAt DateTime
  createdAt   DateTime @default(now())
  note        String?  // ✅ 備考欄（任意）
  weeklyCount Int? 

  @@unique([childId, month]) // 子ども × 月で一意
  @@index([childId, month])  // よく検索する条件にインデックス追加
}

model InvoiceRevision {
  id         String   @id @default(cuid())
  child      Child    @relation(fields: [childId], references: [id])
  childId    String
  month      String
  diff       Json     // 修正された差分
  note       String?  // 管理者メモ（例：学童休園の振替対応）
  createdAt  DateTime @default(now())

  @@index([childId, month])
}

model BillingSetting {
  id           String   @id @default(cuid())
  version      String
  basicPrices  Json
  spotPrices   Json
  optionPrices Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model MonthlyOptionUsage {
  id            String   @id @default(cuid())
  child         Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId       String
  month         String
  optionType    String
  count         Int
  createdAt     DateTime @default(now())

  basicUsage    BasicUsage? @relation(fields: [basicUsageId], references: [id], onDelete: Cascade)
  basicUsageId  String?

  @@unique([childId, month, optionType])
  @@index([childId, month])
}



